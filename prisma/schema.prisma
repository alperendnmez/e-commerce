datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model User {
  id                     Int       @id @default(autoincrement())
  email                  String    @unique
  password               String
  role                   Role      @default(USER)
  firstName              String 
  lastName               String 
  emailVerified          DateTime?
  emailVerificationToken String?   @unique
  tokenExpires           DateTime?
  twoFactorEnabled       Boolean   @default(false)
  twoFactorSecret        String?
  avatarUrl              String?

  cart                   Cart?
  orders                 Order[]
  addresses              Address[]
  reviews                Review[]
  favoriteProducts       UserFavoriteProducts[]

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}




model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  category        Category           @relation(fields: [categoryId], references: [id])
  categoryId      Int
  slug            String             @unique
  orderItems      OrderItem[]
  cartItems       CartItem[]
  variants        ProductVariant[]   // Varyantlarla ilişki
  variantGroups   VariantGroup[]     // Variant Grupları (Renk, Beden gibi)
  reviews         Review[]           // Review bağlantısı düzeltildi
  published       Boolean            @default(false)

  seoTitle        String?
  seoDescription  String?

  brandId         Int?
  brand           Brand?             @relation(fields: [brandId], references: [id])

  favoritedBy     UserFavoriteProducts[]

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now())
}

model ProductVariant {
  id              Int             @id @default(autoincrement())
  product         Product          @relation(fields: [productId], references: [id])
  productId       Int
  variantValues   VariantValue[]   // Kombinasyonu oluşturan değerler
  stock           Int
  price           Float
  imageUrls       String[]         // Varyanta özel resimler
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  CartItem CartItem[]

  OrderItem OrderItem[]
}

model VariantGroup {
  id              Int              @id @default(autoincrement())
  name            String           // Örneğin: Renk, Beden
  product         Product          @relation(fields: [productId], references: [id])
  productId       Int
  values          VariantValue[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
}

model VariantValue {
  id              Int             @id @default(autoincrement())
  value           String          // Örneğin: Siyah, Medium
  variantGroup    VariantGroup    @relation(fields: [variantGroupId], references: [id])
  variantGroupId  Int
  productVariants ProductVariant[] // Bu değerle ilişkili ürün varyantları
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
}


model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime @default(now())
}


model Category {
  id              Int        @id @default(autoincrement())
  name            String
  description     String?
  slug            String     @unique

  seoTitle        String?
  seoDescription  String?

  parentId        Int?
  parent          Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryToParent")
  products        Product[]
}

model Order {
  id               Int         @id @default(autoincrement())
  user             User        @relation(fields: [userId], references: [id])
  userId           Int
  status           OrderStatus @default(PENDING)
  totalPrice       Float
  orderItems       OrderItem[]
  payment          Payment?

  shippingAddressId Int?
  billingAddressId  Int?
  shippingAddress   Address?   @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?   @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])

  couponId         Int?
  coupon           Coupon?     @relation(fields: [couponId], references: [id])

  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
}



model Address {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  street         String
  city           String
  state          String
  zipCode        String
  country        String
  phone          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  // Relation fields for Order shipping and billing
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model CartItem {
  id        Int             @id @default(autoincrement())
  cart      Cart            @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product          @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant?  @relation(fields: [variantId], references: [id]) 
  variantId Int?
  quantity  Int
  price     Float
}

model OrderItem {
  id             Int             @id @default(autoincrement())
  order          Order           @relation(fields: [orderId], references: [id])
  orderId        Int
  product        Product         @relation(fields: [productId], references: [id])
  productId      Int
  variant        ProductVariant? @relation(fields: [variantId], references: [id]) 
  variantId      Int?
  quantity       Int
  price          Float

  returnRequests ReturnRequest[]
}


model Payment {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int      @unique
  amount     Float
  method     String
  status     PaymentStatus @default(PENDING)
  providerName          String?
  providerTransactionId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discountPct Float?
  discountAmt Float?
  validFrom   DateTime?
  validUntil  DateTime?
  usageCount  Int      @default(0)
  maxUsage    Int?
  orders      Order[]
}

model UserFavoriteProducts {
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Brand {
  id             Int      @id @default(autoincrement())
  name           String
  slug           String   @unique
  seoTitle       String?  
  seoDescription String?  // Optional SEO Description
  products       Product[]
}


model ReturnRequest {
  id          Int        @id @default(autoincrement())
  orderItem   OrderItem  @relation(fields: [orderItemId], references: [id])
  orderItemId Int
  reason      String
  status      ReturnStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
